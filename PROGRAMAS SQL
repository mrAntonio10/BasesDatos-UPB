//programa de contador para sql

	DELIMITER ?>

		CREATE PROCEDURE suma_1_n (IN n INT)
		BEGIN
			DECLARE contador INT DEFAULT 1;
			WHILE contador <= n DO
				SELECT contador;
				SET contador = contador +1;
			END WHILE;

		END ?>

	DELIMITER ;




//clientes ----copiar nomaj XDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD

	DELIMITER //
		CREATE PROCEDURE ins_cliente(id_cliente INT, nombre_cliente VARCHAR(100), apellido_cliente VARCHAR(100))
		COMMENT 'Procedimiento que inserta un cliente a la base de datos'
		BEGIN
			IF NOT EXISTS ( SELECT C.ID FROM CLIENTE AS C WHERE C.ID = id_cliente) THEN
				INSERT INTO CLIENTE(ID, NOMBRE, APELLIDO) VALUES ( id_cliente,nombre_cliente,apellido_cliente);
				ELSE
				SELECT 'Este cliente ya existe en la base de datos!';
			END IF;
		END//
	DELIMITER ;





	//tabla necesaria para clientes

		drop table if not exists CLIENTE;

		create table if not exists CLIENTE(
			ID int not null,
			NOMBRE varchar(100) not null,
			APELLIDO varchar(100) not null,
			primary key(ID)
		);




-------ejemplo con OUT

	DELIMITER //
		drop procedure if exists num_personas; //
		CREATE PROCEDURE num_personas (OUT cantidad INT)
		BEGIN
			select count(*) into cantidad from
			employees.employees;
		END //
	DELIMITER ;



--otro ejemplo de parametros IN
	DELIMITER //
		drop procedure if exists empleados; //
		CREATE PROCEDURE empleados (IN id INT)
		BEGIN
			select * from employees.employees where emp_no=id;
		END //
	DELIMITER ;


--ejemplito 1
	DELIMITER //
		drop PROCEDURE if exists dosadosb; //
		CREATE PROCEDURE IF NOT EXISTS dosadosb(a double, b double)
			BEGIN
				DECLARE resultado double DEFAULT 0;

				SET resultado = a*a + b*b;
				SELECT resultado;
			END //
	DELIMITER ;




--ejemplito2 
	
	DELIMITER ?>

	drop PROCEDURE IF EXISTS num_personas2; ?>

	CREATE PROCEDURE IF NOT EXISTS num_personas2(apellido char(100), OUT resultado int)
		BEGIN
			SELECT count(*) INTO resultado 
			from employees.employees e where e.last_name LIKE concat(apellido,'%');
		END ?>

	DELIMITER ;


--ejemplo3 
//interes= costo*rango*taza/100
	DELIMITER ?>
	DROP PROCEDURE IF EXISTS interes; ?>
	CREATE PROCEDURE IF NOT EXISTS interes(costo double, rango double, taza double) 
		BEGIN
			SELECT concat((costo*rango*taza)/100,'%') as Interes;
		END ?>
	DELIMITER ;
	

--ejemplohamed
	DELIMITER //
	drop procedure if exists genero_emp_H; //
	CREATE PROCEDURE genero_emp_H (IN id_usuario int)
	BEGIN
		DECLARE genero char(2);
	    SELECT gender into genero FROM employees.employees WHERE emp_no=id_usuario;
	    
	    SELECT if(genero = 'M', 'VARON', 'MUJER') as GeneroTabla;
	END //
	DELIMITER ;


--ejemplo 	JUEVES
	DELIMITER  ?>
	DROP PROCEDURE IF EXISTS iva; ?>
	CREATE PROCEDURE IF NOT EXISTS iva(entrada double)
	BEGIN
		select concat(entrada*0.13,'%') as IVA;
	END ?>

	DELIMITER ;


--ejemplo JUEVES 3

	DELIMITER ?>

	DROP PROCEDURE IF EXISTS ivaSalar; ?>
	CREATE PROCEDURE IF NOT EXISTS ivaSalar(id int)
		BEGIN
			DECLARE iva double(10,2);
			SELECT e.first_name,e.last_name, s.salary AS SALARIO, s.salary*0.13 AS IVA,  s.salary -s.salary*0.13 AS NETO from employees.employees e, employees.salaries s WHERE e.emp_no=id AND e.emp_no=s.emp_no;
		END ?>

	DELIMITER ;

--ejemplo JUEVES 4
	DELIMITER ?>
	DROP PROCEDURE IF EXISTS actor; ?>

	CREATE PROCEDURE IF NOT EXISTS actor(apellido char(25))
		BEGIN
			SELECT DISTINCT a.first_name, f.title from sakila.actor a, sakila.film f, sakila.film_actor fa where a.last_name LIKE concat(apellido,'%') AND fa.actor_id=a.actor_id AND fa.film_id = f.film_id;

		END ?>

	DELIMITER ;


---ejemplo LUNES 5
	DELIMITER ?>
	DROP PROCEDURE IF EXISTS cambio_mail; ?>
	CREATE PROCEDURE IF NOT EXISTS cambio_mail(IN id int, IN correo char(30))
		BEGIN
			UPDATE sakila.customer SET email=correo WHERE customer_id=id;

			SELECT concat('Se cambio el email del usuario: ', id, '  por el correo: ', correo) as RESPUESTA;
		END ?>

	DELIMITER ;
---ejemplo LUNES 6
	DELIMITER ?>
	DROP PROCEDURE IF EXISTS cambio_hiredate; ?>
	CREATE PROCEDURE IF NOT EXISTS cambio_hiredate(IN id int, IN fechaD DATE)
		BEGIN
			UPDATE employees.employees SET hire_date=fechaD where emp_no=id AND gender='M';
			SELECT concat(' La fecha de contratacion del usuario: ', id, ' se cambio por: ', fechaD);
		END ?>
	DELIMITER ;


-----HIREDATE VERSION 2
	DELIMITER ?>
	DROP PROCEDURE IF EXISTS cambio_hiredate2; ?>
	CREATE PROCEDURE IF NOT EXISTS cambio_hiredate2(IN id int, IN fechaD DATE)
	BEGIN
		SELECT * FROM employees.employees WHERE emp_no=id;
		UPDATE employees.employees SET hire_date=fechaD where emp_no=id AND gender='M';
		IF ROW_COUNT() > 0 THEN
			SELECT 'se modifico el usuario';

		ELSE
			SELECT 'El usuario no es Hombre';
		END IF;
	END ?>

	DELIMITER ;



---BUCLES-----------
DELIMITER ?>
DROP PROCEDURE IF EXISTS loop1; ?>
CREATE PROCEDURE IF NOT EXISTS loop1()
	BEGIN
		DECLARE contador BIGINT DEFAULT 0;

		buclecito:LOOP
			SET contador = contador + 1;
			IF contador > 10 THEN
				LEAVE buclecito;
			END IF;
			SELECT contador as Resultado;
		END LOOP buclecito;
	END ?>

DELIMITER ;

-----ejemplo 2
DELIMITER ?>
DROP PROCEDURE IF EXISTS loop_simple; ?>
CREATE PROCEDURE IF NOT EXISTS loop_simple()
	BEGIN 
		DECLARE contador INT DEFAULT 0;

		WHILE contador <=10 DO
			if(contador%2 != 0) THEN
				SELECT contador as Resultado;
			END IF;

			SET contador=contador + 1;
		END WHILE;
	END ?>
DELIMITER ;

----ITERATE
DELIMITER ?>
DROP PROCEDURE IF EXISTS iterateE; ?>
CREATE PROCEDURE IF NOT EXISTS iterateE()
BEGIN
	DECLARE contador INT DEFAULT 0;
	buclecito: WHILE contador <= 10 DO
		SET contador = contador +1;
		IF (contador%2 != 0) THEN
			ITERATE buclecito;
		END IF;
		SELECT contador as Respuesta;
	END WHILE buclecito;
END ?>

DELIMITER ;



-----EJEMPLO 2------
DELIMITER ?>
DROP PROCEDURE IF EXISTS muerteMascotas; ?>
CREATE PROCEDURE IF NOT EXISTS muerteMascotas(nombre CHAR(20), fechaD DATE)
	BEGIN
		UPDATE menagerie.pet SET death=fechaD WHERE death is NULL AND name=nombre;

		IF ROW_COUNT() > 0 THEN
			SELECT 'Fecha Actualizada';
			SELECT * FROM menagerie.pet WHERE name=nombre;
			
		ELSE
			SELECT 'No se pudo modificar, el perro ya tiene registro de defuncion';
		END IF;
	END ?>

DELIMITER ;

-----EJEMPLO 3-----
DELIMITER ?>
DROP PROCEDURE IF EXISTS muerteMascotas2; ?>
CREATE PROCEDURE IF NOT EXISTS muerteMascotas2(nombre CHAR(20), fechaD DATE)
	BEGIN
		UPDATE menagerie.pet SET death=fechaD WHERE name=nombre AND  birth < fechaD;

		IF ROW_COUNT() > 0 THEN
			SELECT 'Fecha Actualizada';
			SELECT * FROM menagerie.pet WHERE name=nombre;
			
		ELSE
			SELECT 'No se pudo modificar, el perro ya tiene registro de defuncion O la fecha de defuncion es menor a nacimiento' as RESULTADO;
		END IF;
	END ?>

DELIMITER ;

-------------------------------------------FUNCIONES---------------------------------------

DELIMITER ?>
DROP FUNCTION IF EXISTS holaMundo; ?>
CREATE FUNCTION IF NOT EXISTS holaMundo() RETURNS varchar(20)
BEGIN
	RETURN 'Hola Mundo';
END ?>

DELIMITER ;


--- EJEMPLO 2-3

DELIMITER ?>
DROP FUNCTION IF EXISTS holaMundo2; ?>
CREATE FUNCTION IF NOT EXISTS holaMundo2(entrada VARCHAR(30)) RETURNS VARCHAR(50)
BEGIN
	DECLARE salida VARCHAR(50) DEFAULT 'Hola Mundo';

	SET salida = concat('Hola ', entrada,' , Como estas?');

	RETURN salida;
END ?>
DELIMITER ;


----- ejemplo 4 DIVIDE

DELIMITER ?>
DROP FUNCTION IF EXISTS divide; ?>
CREATE FUNCTION IF NOT EXISTS divide(dividendo int, divisor int) RETURNS double
	BEGIN
		DECLARE aux int;
		DECLARE contador int;
		DECLARE resto int;
			SET contador=0;
			SET aux=0;

			while (aux+divisor) <= dividendo do
				set aux = aux+divisor;
				set contador = contador+1;
			end while;

			set resto = dividendo - aux;
		RETURN contador;
	END?>
DELIMITER ;



---ejemplo 5 CALCULAR EDAD

DELIMITER ?>
DROP FUNCTION IF EXISTS edad; ?>
CREATE FUNCTION IF NOT EXISTS edad(nacimiento date) RETURNS int
	BEGIN
		RETURN floor( datediff(now(),nacimiento)/365);
	END ?>
DELIMITER ;


-----ejemplo 6 IVA
DELIMITER ?>
DROP FUNCTION IF EXISTS iva; ?>
CREATE FUNCTION IF NOT EXISTS iva(salario int) RETURNS double
	BEGIN
		DECLARE resultado double;
		SET resultado = (salario * 13)/100;

		RETURN resultado;
	END ?>
DELIMITER ;


---SELECT:
								* select del ejemplo
	>>>>> SELECT e.first_name, e.last_name, s.salary, '13%' as ImporteIva, iva(s.salary) from employees.employees e, employees.salaries s order by rand() WHERE e.emp_no = s.emp_no limit 10;

								* select con salario neto
	>>>>> SELECT e.first_name, e.last_name, s.salary, '13%' as ImporteIva, iva(s.salary) as ImporteIva, s.salary-iva(s.salary) as salarioNeto from employees.employees e, employees.salaries s WHERE e.emp_no = s.emp_no order by rand() limit 10;


---ejemplo 7 WEEKDAY 

DELIMITER ?>
DROP FUNCTION IF EXISTS dia; ?>
CREATE FUNCTION IF NOT EXISTS dia(num DATE) RETURNS VARCHAR(30)
	BEGIN
		DECLARE caso int;
		DECLARE dia char(10);
		SET caso= WEEKDAY(num);
			IF(caso=0) then
				SET dia='Lunes';
			ELSEIF(caso=1) THEN
				SET dia='Martes';
			ELSEIF(caso=2) THEN
				SET dia='Miercoles';
			ELSEIF(caso=3) THEN
				SET dia='Jueves';
				ELSEIF(caso=4) THEN
				SET dia='Viernes';
			ELSEIF(caso=5) THEN
				SET dia='Sabado';
			ELSEIF(caso=6) THEN
				SET dia='Domingo';
			ELSE
				SET dia='--error inesperado--';
			end IF;
		RETURN concat('El dia es: ',dia);
	END ?>
DELIMITER ;

-----------------MAS EJEMPLOS-----------------
DELIMITER ?>
DROP PROCEDURE IF EXISTS costomayor; ?>
CREATE PROCEDURE IF NOT EXISTS costomayor(IN precio decimal(5,2))
	BEGIN
		SELECT film_id, title, replacement_cost from sakila.film WHERE replacement_cost > precio;
	END ?>
DELIMITER ;



DELIMITER ?>
DROP FUNCTION IF EXISTS costomayor2; ?>
CREATE FUNCTION IF NOT EXISTS costomayor2(precio decimal(5,2)) RETURNS int
	BEGIN
		DECLARE resultado int;

		SELECT count(*) into resultado from sakila.film WHERE replacement_cost > precio;

		RETURN resultado;
	END ?>
DELIMITER ;

------------------SELECT:
				>>>>> SELECT film_id, title, replacement_cost, costomayor2(10) as masPeliculas from sakila.film order by rand() limit 5;

-----EJEMPLO DE IDIOMAS Q HABLAN :D
DELIMITER ?>
DROP FUNCTION IF EXISTS hablan; ?>
CREATE FUNCTION IF NOT EXISTS hablan(idioma char(30)) RETURNS int
	BEGIN 
		DECLARE cantidad int DEFAULT 0;
		SELECT count(*) into cantidad from world.countrylanguage cl WHERE cl.Language=idioma; 

		RETURN cantidad;
	END ?>
DELIMITER ;

------------------SELECT:
				>>>>> SELECT c.Name, cl.Language, hablan(cl.Language) from world.country c, world.countrylanguage cl WHERE c.Code=cl.CountryCode order by rand() limit 5;



------Sakila categories

DELIMITER ?>
DROP FUNCTION IF EXISTS categoria; ?>
CREATE FUNCTION IF NOT EXISTS categoria(cat varchar(25)) RETURNS int
	BEGIN
		DECLARE cantidad int DEFAULT 0;
		DECLARE tipoCat int;
			SELECT category_id into tipoCat from sakila.category WHERE category.name=cat;

			SELECT count(*) into cantidad from sakila.film_category WHERE category_id=tipoCat;

			RETURN cantidad; 

	END ?>
DELIMITER ;


------------------SELECT:
				>>>>> SELECT f.film_id,f.title,c.name as categoria, categoria(c.name) FROM sakila.film f, sakila.film_category fc, sakila.category c WHERE f.film_id= fc.film_id AND c.category_id=fc.category_id order by rand() limit 10;


-----ejemplo tipo examen
DELIMITER ?>
DROP PROCEDURE IF EXISTS pagarDesempleado; ?>
CREATE PROCEDURE IF NOT EXISTS pagarDesempleado(id int)
	BEGIN
		DECLARE sueldoMasElevado int DEFAULT 0;
			select MAX(salary) into sueldoMasElevado from employees.salaries WHERE emp_no=id;

		DECLARE quin int DEFAULT 0;
			SET quin = 
		SELECT e.first_name, e.last_name, e.hire_date, edad(e.hire_date) as anhiosTrabajados FROM employees.employees e WHERE e.emp_no=id;
		

	END ?>
DELIMITER ;





--------------------------EJERCICIOS TIPO EXAMEN XDDDDDDDD-----------------------------

DELIMITER ?>
DROP PROCEDURE IF EXISTS datos_emp; ?>
CREATE PROCEDURE IF NOT EXISTS datos_emp(id int)
	BEGIN
		SELECT e.emp_no as Id, concat(e.first_name,' ',e.last_name) as Nombre, t.title as Posicion, MAX(s.salary) as Salario FROM employees.employees e, employees.salaries s, employees.titles t WHERE e.emp_no=id AND e.emp_no=t.emp_no AND e.emp_no=s.emp_no;
	END ?>
DELIMITER ;



DELIMITER ?>
DROP PROCEDURE IF EXISTS mas_poblado; ?>
CREATE PROCEDURE IF NOT EXISTS mas_poblado(pais varchar(20))
	BEGIN
		SELECT co.Code as Codigo, co.Name as Nombre, ci.Name as MasPoblado, MAX(ci.Population) as Poblacion FROM world.city ci, world.country co WHERE co.Name LIKE concat(pais,'%') AND co.Code = ci.CountryCode/g;
	END?>

DELIMITER ;











-------------------------------CREAR BASE DE DATOS XDDDDDDDDDDDD-------------------------------

create table if not exists user_upb(
	id_user int not null,
	nombre varchar(30),
	apellidos varchar(30),
	fechaNac DATE,
	primary key (id_user)
);
		INSERT INTO user_upb values (1,'Marco Antonio','Roca Montenegro','2020-02-06');

create table if not exists carreras_upb(
	id_carrera int not null,
	nombre varchar(30),
	primary key (id_carrera)
);

		INSERT INTO carreras_upb values(1,'Sistemas el mas pro');
		INSERT INTO carreras_upb values(2,'Comercial zzzz');
		INSERT INTO carreras_upb values(3,'Admin +zzzzz');

create table if not exists user_campus(
usuario int not null,
carrera int not null,
fecha_incorporacion DATE,
habilitado INT CHECK (habilitado IN(1,2)),
foreign key(usuario) REFERENCES user_upb(id_user),
foreign key(carrera) REFERENCES carreras_upb(id_carrera)
);
		INSERT INTO user_campus values (1,1,'2023-06-02',1);

DELIMITER ?>
DROP PROCEDURE IF EXISTS alta; ?>
CREATE PROCEDURE IF NOT EXISTS alta(id INT, nombre varchar(30), apellidos varchar(30), fechaNac DATA, carrera VARCHAR(30))
	BEGIN
		INSERT INTO user_upb values (id, nombre, apellidos, fechaNac);
		DECLARE carrera_id INT DEFAULT 0;
			SELECT id_carrera into carrera_id from carreras_upb WHERE id_carrera LIKE concat(carrera,'%');
		INSERT INTO user_campus values (id, carrera_id,CURDATE());
	END ?>
DELIMITER ;












---------------------------------------------------TRIGGERS-------------------------------------------------------------

DROP TABLE IF EXISTS test1;
DROP TABLE IF EXISTS test2;
CREATE TABLE IF NOT EXISTS test1(a1 INT);
CREATE TABLE IF NOT EXISTS test2(a2 INT);

DELIMITER ?>

CREATE TRIGGER testref AFTER INSERT ON test1
	FOR EACH ROW
		BEGIN
			INSERT INTO test2(a2) VALUES(NEW.a1);
		END ?>
DELIMITER ;


EJEMPLO 2

	DROP TABLE IF EXISTS detalle_factura;
	DROP TABLE IF EXISTS log_updates;

	CREATE TABLE IF NOT EXISTS detalle_factura(
	iddetalle INT NOT NULL,
	idfactura INT NOT NULL, 
	idproducto INT NOT NULL, 
	precio double(5,2), 
	unidades INT NOT NULL
	);

	CREATE TABLE IF NOT EXISTS log_updates(idusuario varchar(30) NOT NULL, descripcion varchar(200));

	DELIMITER ?>

	CREATE TRIGGER detalle_factura_trigger AFTER UPDATE ON detalle_factura
		FOR EACH ROW
			BEGIN
				INSERT INTO log_updates(idusuario, descripcion) VALUES (user(), concat('Se modifico el registro (', OLD.iddetalle, '; ', OLD.idfactura, '; ', OLD.idproducto, '; ', OLD.precio, '; ',
				OLD.unidades, ') POR(', NEW.iddetalle, '; ', NEW.idfactura, '; ', NEW.idproducto, '; ', NEW.precio, '; ', NEW.unidades, ')'));
			END ?>
	DELIMITER ;
							--INSERT INTO detalle_factura VALUES (1,121415,5,15.20,4); 
							--INSERT INTO detalle_factura VALUES (2,200,5,20.20,5);
							--INSERT INTO detalle_factura VALUES (3,201,10,50.20,5);
						--UPDATE detalle_factura SET precio = 8.50, unidades = 2 WHERE iddetalle=1; 

EJEMPLO 3
DROP TABLE IF EXISTS customer;
	CREATE TABLE IF NOT EXISTS customer(
		SD INTEGER,
		lastName varchar(30)
	);

DROP TRIGGER IF EXISTS trig_sd_check;
DELIMITER ?>
CREATE TRIGGER IF NOT EXISTS trig_sd_check BEFORE INSERT ON customer
	FOR EACH ROW
		BEGIN
			IF NEW.sd <0 THEN
				SET NEW.SD=0;
			END IF;
		END ?>
DELIMITER ;
						INSERT INTO customer VALUES (1,'Roca');
						INSERT INTO customer VALUES (-10,'Roca');



EJEMPLO 4

DROP TABLE IF EXISTS datosEmpleados;
CREATE TABLE IF NOT EXISTS datosEmpleados(
	CI int NOT NULL,
	Apellidos varchar(30),
	Fecha_Nac DATE,
	edad int NOT NULL,
	Genero enum('M','F'),
	Nacionalidad varchar(20)
);

DROP TRIGGER IF EXISTS trigger_edad;
DELIMITER ?>
	CREATE TRIGGER IF NOT EXISTS trigger_edad BEFORE INSERT ON datosEmpleados
		FOR EACH ROW
			BEGIN
				SET NEW.edad = floor( datediff( now(), NEW.Fecha_Nac)/365);
			END ?>
DELIMITER ;

					INSERT INTO datosEmpleados VALUES (12413105,'Roca Montenegro','2001-07-01', NULL, 'M', 'Gringo');



EJEMPLO 5

DROP TABLE IF EXISTS datosAlumnos;
CREATE TABLE IF NOT EXISTS datosAlumnos(
	codigo INT NOT NULL AUTO_INCREMENT,
	nombre varchar(30),
	anio INT NOT NULL, 
	genero enum('M','F'),
	PRIMARY KEY(codigo)
);

DROP TRIGGER IF EXISTS trigger_anio_between;
DELIMITER ?>
CREATE TRIGGER IF NOT EXISTS trigger_anio_between BEFORE INSERT ON datosAlumnos
	FOR EACH ROW
		BEGIN
			IF NEW.anio< 2016 or New.anio>2018 THEN
				SET NEW.anio=null;
			END IF;
		END ?>
DELIMITER ;







------------------------------------EJERCICIO EN CLASE----------------------------

DROP TABLE IF EXISTS persona;
CREATE TABLE IF NOT EXISTS persona(
	codigo int NOT NULL,
	nombre varchar(30),
	edad int
	
);

DROP TABLE IF EXISTS registroDatos;
CREATE TABLE IF NOT EXISTS registroDatos(
	codigo int NOT NULL,
	cuando DATE,
	tipo enum('i','u','d')
);

DROP TRIGGER IF EXISTS tipo_insercion_trigger;
DELIMITER ?>
CREATE TRIGGER IF NOT EXISTS tipo_insercion_trigger AFTER INSERT ON persona
	FOR EACH ROW
		BEGIN
			INSERT INTO registroDatos(codigo, cuando, tipo) VALUES (NEW.codigo, now(), 'i');
		END ?>
DELIMITER ;

------INSERTS:
	INSERT INTO persona(codigo, nombre, edad) VALUES (1,'Marco Roca',12);
	INSERT INTO persona(codigo, nombre, edad) VALUES (2,'Luis Roca',10);
	INSERT INTO persona(codigo, nombre, edad) VALUES (3,'Valeria Roca',6);


DROP TRIGGER IF EXISTS tipo_modificacion_trigger;
DELIMITER ?>
CREATE TRIGGER IF NOT EXISTS tipo_modificacion_trigger BEFORE UPDATE ON persona
	FOR EACH ROW
		BEGIN
			INSERT INTO registroDatos(codigo, cuando, tipo) VALUES (OLD.codigo, now(), 'u');
		END ?>
DELIMITER ;

	UPDATE persona SET codigo=10, nombre='Marcoro Roca' WHERE codigo=1;


DROP TRIGGER IF EXISTS tipo_eliminacion_trigger;
DELIMITER ?>
CREATE TRIGGER IF NOT EXISTS tipo_eliminacion_trigger BEFORE DELETE ON persona
	FOR EACH ROW
		BEGIN
			INSERT INTO registroDatos(codigo, cuando, tipo) VALUES (OLD.codigo, now(), 'd');
		END ?>
DELIMITER ;

	DELETE from persona WHERE codigo=2;




------------------------------------EJERCICIOSSS---------------------------
	EJ1
DROP PROCEDURE IF EXISTS paisesLengua;
DELIMITER ?>
CREATE PROCEDURE IF NOT EXISTS paisesLengua(continente VARCHAR(3), leng VARCHAR(30))
	BEGIN
		SELECT coun.Code, coun.Continent, cl.Language, ci.Name FROM world.country coun, world.countryLanguage cl, world.city ci WHERE ci.CountryCode=coun.Code AND cl.CountryCode=coun.Code AND cl.Language=leng AND coun.Continent LIKE concat(continente,'%') ORDER BY ci.NAME ASC;
	END ?>
DELIMITER ;


	EJ2
DROP PROCEDURE IF EXISTS verPelis;
DELIMITER ?>
CREATE PROCEDURE IF NOT EXISTS verPelis(costo1 double(5,2), costo2 double(5,2))
	BEGIN
		SELECT f.title, f.replacement_cost FROM sakila.film f WHERE f.replacement_cost BETWEEN costo1 AND costo2;
	END ?>
DELIMITER ;


	EJ3
DROP FUNCTION IF EXISTS func_cadena;
DELIMITER ?>
CREATE FUNCTION IF NOT EXISTS func_cadena(palabra VARCHAR(30)) RETURNS VARCHAR(50)
	BEGIN
		DECLARE largo varchar(3);
		SELECT LENGTH(palabra) INTO largo;
			RETURN concat('El largo de la palabra es de: ',largo,' caracteres');
	END ?>
DELIMITER ;


	EJ4
DROP FUNCTION IF EXISTS duracionPeli;
DELIMITER ?>
CREATE FUNCTION IF NOT EXISTS duracionPeli(duracion int) RETURNS double(5,2)
	BEGIN
		DECLARE dPeli double(5,2) DEFAULT 0;
		SELECT duracion/60 INTO dPeli;
			RETURN dPeli;
	END ?>
DELIMITER ;

	EJ5
DROP FUNCTION IF EXISTS trabajadoresVigentes;
DELIMITER ?>
CREATE FUNCTION IF NOT EXISTS trabajadoresVigentes(departamento varchar(5)) RETURNS INT
	BEGIN
		DECLARE cantidad INT DEFAULT 0;
		SELECT count(*) INTO cantidad FROM employees.dept_emp WHERE dept_no=departamento AND to_date > now();
			RETURN cantidad;
	END ?>
DELIMITER ;

		select d.dept_no, d.dept_name, concat(e.last_name, ' ', e.first_name) as Administrador, trabajadoresVigentes(d.dept_no) from employees.departments d,
employees.dept_manager dm, employees.employees e where d.dept_no=dm.dept_no and dm.emp_no=e.emp_no and dm.to_date>now()
order by dept_no asc LIMIT 10;


	EJ6
DROP TABLE IF EXISTS Alumnos;
CREATE TABLE IF NOT EXISTS Alumnos(
	id int,
	nombre varchar(30),
	apellido1 varchar(30),
	apellido2 varchar(30),
	asignatura varchar(10),
	fecha_nac DATE,
	nota double(5,3)
);

DROP TRIGGER IF EXISTS trigger_check_nota_before_insert;
DELIMITER ?>
CREATE TRIGGER IF NOT EXISTS trigger_check_nota_before_insert BEFORE INSERT ON 




DROP TABLE NOTAS;
CREATE TABLE notas (
  ID_NOTA int(11) NOT NULL,
  Apellido varchar(30) ,
  Nombre varchar(30) ,
  Materia varchar(30) ,
  Nota int(11)  NOT NULL
);

DELIMITER ?>
CREATE TRIGGER IF NOT EXISTS datosNOTAS BEFORE INSERT ON notas
FOR EACH ROW
BEGIN
IF NEW.Nota < 0  OR NEW.Nota > 100 THEN
	SET NEW.Nota = null;
END IF;
END ?>
DELIMITER ;